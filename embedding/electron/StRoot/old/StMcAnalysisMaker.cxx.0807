#include "TFile.h"
// #include "TH3F.h"
#include "TNtuple.h"
#include "TSystem.h"

#include "StarClassLibrary/StParticleDefinition.hh"
#include "StarClassLibrary/SystemOfUnits.h"
#include "StarClassLibrary/StParticleTypes.hh"
#include "StBFChain/StBFChain.h"

#include "StEvent/StEventTypes.h"
#include "StEvent/StTrack.h"
#include "StEvent/StTrackGeometry.h"
#include "StEvent/StTrackNode.h"
#include "StEvent/StGlobalTrack.h"
#include "StEvent/StTrackTopologyMap.h"
#include "StEvent/StEventSummary.h"
#include "StEvent/StBTofCollection.h"
#include "StEvent/StBTofHeader.h"
#include "StEvent/StEnumerations.h"
#include "StEvent/StEvent.h"
#include "StEvent/StTpcDedxPidAlgorithm.h"
#include "StEventUtilities/StuRefMult.hh"
#include "StMuDSTMaker/COMMON/StMuDstMaker.h"
#include "StMuDSTMaker/COMMON/StMuDst.h"
#include "StMuDSTMaker/COMMON/StMuEvent.h"
#include "StMuDSTMaker/COMMON/StMuTrack.h"
#include "StMuDSTMaker/COMMON/StMuPrimaryVertex.h"

#include "StMcEvent/StMcEventTypes.hh"
#include "StMcEvent/StMcContainers.hh"
#include "StMcEvent/StMcVertex.hh"
#include "StMcEvent/StMcEvent.hh"
#include "StMcEvent/StMcTrack.hh"

#include "StAssociationMaker/StAssociationMaker.h"
#include "StAssociationMaker/StTrackPairInfo.hh"
#include "../StRefMultCorr/StRefMultCorr.h"
#include "StMcAnaCuts.h"
#include "StMcAnalysisMaker.h"

ClassImp(StMcAnalysisMaker);

StMcAnalysisMaker::StMcAnalysisMaker(const char *name, const char *title): StMaker(name),
   mGRefMultCorrUtil(NULL), mMuDst(NULL), mField(-999), mCentrality(-999), 
   mFile(NULL),  mMcEvent(NULL), mEvent(NULL), mAssoc(NULL)
{
   LOG_INFO << "StMcAnalysisMaker() - DONE" << endm;
}
//__________________________________
int StMcAnalysisMaker::Init()
{

   mOutfileName = mOutfileName.ReplaceAll(".root", "");
   mFile = new TFile(Form("%s.McAna.root", mOutfileName.Data()), "recreate");
   assert(mFile && !mFile->IsZombie());
      
   for (int ii = 0; ii < McAnaCuts::maxNumberOfTriggers; ++ii)
   {
      firedTriggersIndices.push_back(-1);
   };

   hnHitsvsPt = new TH2F("hnHits","hnHits;nHits;p_{T}",55,0,55,10,0,5); 
   // hnHitsvsPt_pi2e = new TH2F("hnHits_pi2e","hnHits;nHits;p_{T}",55,0,55,10,0,5); 
   hDCAvsPt = new TH2F("hDCA","hDCA;DCA;p_{T}",100,0,3,10,0,5);
   hnPi0 = new TH1F("hnPi0","hnPi0",100,0,100); 
   hRefmult = new TH1F("hRefmult","hRefmult",500,0,500);
   hPi2tot = new TH1F("hPi2tot","hPi2tot",30,0,0.3);
   hPi0Pt = new TH1F("hPi0Pt","hPi0Pt;pt;#eta;#phi",120,0,15);
   hMcElectronPtvsCent = new TH2F("hMcElectronPtvsCent","hMcElectron;p_{T};Cent",40,0,4,9,-0.5,8.5);
   hRcElectronPtvsCent = new TH2F("hRcElectronPtvsCent","hRcElectron;p_{T}",40,0,4,8.5,-0.5,8.5);
   LOG_INFO << "Init() - DONE" << endm;
   return kStOk;
}

//__________________________________
int StMcAnalysisMaker::Make()
{
   cout<< "start new event.."<<endl;
   StMuDstMaker* muDstMaker = (StMuDstMaker*)GetMaker("MuDst");

   if (!muDstMaker)
   {
      LOG_WARN << " No MuDstMaker, will try to take all event information from StEvent" << endm;
      mMuDst = NULL;
   }
   else
   {
     mMuDst = (StMuDst*)muDstMaker->muDst();
   }

   if(!mMuDst || !mMuDst->event())
   {
     LOG_WARN << "MuDst or mMuDst->event() is missing, will try to take all event information from StEvent" << endm;
     mMuDst = NULL;
   }
   mMcEvent = (StMcEvent*)GetDataSet("StMcEvent");

   if (!mMcEvent)
   {
      LOG_WARN << "No StMcEvent" << endm;
      return kStWarn;
   }
   mEvent = (StEvent*)GetDataSet("StEvent");
   if (!mEvent)
   {
      LOG_WARN << "No StEvent" << endm;
      return kStWarn;
   }
   cout<< "load event Mc event finish..."<<endl;
   cout<<"Get StAssociationMaker" <<endl;
   mAssoc = (StAssociationMaker*)GetMaker("StAssociationMaker");
   if (!mAssoc)
   {
      cout << "Could not get StAssociationMaker" << endl;
      return kStErr;
   }
   else if (mAssoc) {
        if (!(mAssoc->rcTpcHitMap()&&
              mAssoc->rcTrackMap()&&
              mAssoc->mcTrackMap()))
          {
            cout<<"Could not get StAssociationMaker maps" << endl;
            return kStErr;
          }
   }

   mField = (float)mEvent->summary()->magneticField();
   // cout<<"start refmult"<<endl;
   if(mGRefMultCorrUtil && mMuDst)
   {
     mGRefMultCorrUtil->init(mEvent->runId());
     mGRefMultCorrUtil->initEvent(mMuDst->event()->refMult(),
                                  mEvent->primaryVertex()->position().z(), 
                                  mEvent->runInfo()->zdcCoincidenceRate() );
 
     if (mGRefMultCorrUtil->isBadRun(mEvent->runId()))
     {
       LOG_INFO << "This is a bad run from mGRefMultCorrUtil! Skip! " << endm;
       return kStSkip;
     }
     mCentrality  = mGRefMultCorrUtil->getCentralityBin9();
     cout << " centrality "<< mCentrality << " refMult "<<  mMuDst->event()->refMult()<<endl;
   }
   else
   {
     mCentrality = -999;
   }
   if (mCentrality<0) return kStSkip;
   cout<<"refmult finish..." <<endl;
   hRefmult->Fill(mMuDst->event()->refMult()); 

   //primary vertex position
   mpVtx = mEvent->primaryVertex()->position();

   // Fill
   int nRTracks = -1;
   int nMcTracks = -1;

   cout<< "check trigger and fill track..."<<endl;
   int fillTracksStatus = kStOk;
   if (passTrigger())
   {
      fillTracksStatus = fillTracks(nRTracks, nMcTracks);
   }
   else
   {
      LOG_INFO << "No interesting triggers. Counting event then skipping." << endm;
   }

   // int fillEventCountStatus = fillEventCounts((float)nRTracks, (float)nMcTracks);

   // return fillTracksStatus && fillEventCountStatus;
   return fillTracksStatus;
}

int StMcAnalysisMaker::fillTracks(int& nRTracks, int& nMcTracks)
{
   nRTracks = 0;
   nMcTracks = 0;

   LOG_INFO << "START Filling " << mMcEvent->tracks().size() << " mcTracks..." << "\n";

   nPi0 = 0;

    // key -1 is the index and idTruth is equal to key if this rctrack is a MC track 
   cout <<"fillMcTrack" <<endl;
   // std::vector<StTrack*> mrcTrackPrimaryVector;
   for (unsigned int iTrk = 0;  iTrk < mMcEvent->tracks().size(); ++iTrk)
   {
      StMcTrack* const mcTrack = mMcEvent->tracks()[iTrk];
      if (!mcTrack)
      {
         LOG_WARN << "Empty mcTrack container" << endm;
         continue;
      }
      // if (!isGoodMcTrack(mcTrack)) continue;
      if (isGoodMcTrack(mcTrack)) ++nMcTracks;
      cout <<"mcTrack key: "<< mcTrack->key() << " "<< mcTrack->geantId() << endl;
      fillMcTrack(mcTrack);
      int nCom = -999;
      // StTrack const * rcTrack = findPartner(mcTrack,nCom); 
      // if (!rcTrack) continue;
      // if (nCom<=10) continue; 
      // ++nRTracks;
      // rcTrackVector.push_back(rcTrack);
      // cout<< "paired rc: "<<rcTrack->idTruth()<< " mc: "<<mcTrack->key() <<endl;
   }
   hnPi0->Fill(nPi0);
   hPi2tot->Fill(1.*nPi0/mMuDst->event()->refMult()); 

   cout <<"fillRcTrack..." <<endl;
   // the electron we use are primary tracks
   // for (unsigned int ircTrk = 0;ircTrk<mMuDst->primaryTracks()->GetEntries();ircTrk++)
   for (unsigned int ircTrk = 0;ircTrk<;ircTrk++)
   {
      StMuTrack* rcTrack = mMuDst->primaryTracks(ircTrk);
      if (!rcTrack) {
        LOG_WARN<<" no rcTrack input! "<< endm;
        continue;
      }
      int idTruth = rcTrack->idTruth();
      // bool isfromMcTrack =  (idTruth>nPi0 && idTruth<=mMcEvent->tracks().size()); 
      bool isfromMcTrack =  (idTruth>0 && idTruth<=int(mMcEvent->tracks().size())); 
      if (!isfromMcTrack) continue;
      ++nRTracks;
      // cout<< "idTruth " << idTruth<< endl;

      StMcTrack* const mcTrack = mMcEvent->tracks()[idTruth-1];
      if (!mcTrack) cout<<"idTruth is not correct!" << endl;
      if (mcTrack->geantId()!=2 &&  mcTrack->geantId()!=3) continue;
      // if (!isGoodMcTrack(mcTrack)) continue;
      fillRcTrack(rcTrack);
      pairPartnerElectron(rcTrack, mcTrack);
   }
  
   cout<<"MC Tracks:  " <<nMcTracks << " RC tracks: "<< nRTracks <<endl;
   // LOG_INFO << endm;
   return kStOk;
}

void StMcAnalysisMaker::fillMcTrack(StMcTrack const* const mcTrk)
{
   if (mcTrk->geantId()==10007) 
   {
      nPi0++;    
      hPi0Pt->Fill(mcTrk->pt());
   } 
   else 
   {
      if ( mcTrk->geantId() == 2 ||  mcTrk->geantId() == 3)
      {
        // cout <<" test the mother key "<<mcTrk->key() <<" " << mcTrk->parent()->key()<<endl;; 
        hMcElectronPtvsCent->Fill(mcTrk->pt(),mCentrality);
      }
   }

}

void StMcAnalysisMaker::fillRcTrack( StTrack const* const rcTrack)
{
   float dca = rcTrack->dcaGlobal().mag();
   int nHitsFit = rcTrack->nHitsFit();
   int nHitsMax = rcTrack->nHits();
   bool passnHits = nHitsFit >20 &&  nHitsFit/(1.*nHitsMax)>0.52  ;
   // cout << (nHitsFit >20)<<" "<< (nHitsFit/(1.*nHitsMax) > 0.52)  <<endl;
   // cout <<" nSigmaE "<<  rcTrack->nSigmaElectron()  <<endl;
   if (passnHits) hDCAvsPt->Fill(dca,rcTrack->pt());  
   bool goodRcTrack = passnHits && fabs(dca)<1.5 && rcTrack->pt()>StMcAnaCuts::minPt;
   if (!goodRcTrack) return; 
   hnHitsvsPt->Fill(nHitsFit,rcTrack->pt()); 
   hRcElectronPtvsCent->Fill(rcTrack->pt(),mCentrality);
}

void StMcAnalysisMaker::pairPartnerElectron(StMuTrack const* const TagE,StMcTrack const * const McTagE)
{
      bool isgoodTagE = isGoodTagE(rcTrack);
      if (!isgoodTagE) return;
     
      StMcTrack* mother = McTagE->parent(); 
      fillPhoEv2(TagE,McTagE);

      //partner electron are global tracks
      for (unsigned int ipart =0;ipart<mMuDst->globalTracks()->GetEntries();ipart++)
      {
         StMuTrack* PartE = mMuDst->globalTracks(ipart);
         if (!PartE) {
           LOG_WARN<<" no Partner Electron input! "<< endm;
           continue;
         }
         int idTruth = PartE->idTruth();
         bool isfromMcTrack =  (idTruth>0 && idTruth<=int(mMcEvent->tracks().size())); 
         if (!isfromMcTrack) continue;
         StMcTrack* McPartE = mMcEvent->tracks()[idTruth-1]; 
         if (!MCpartE)
         { 
           continue; 
           cout<<"cannot find partner electron MC track"<<endl;
         }
         int motherId = -999;
         if (mother) motherId = mother->key();
         //check if partner e come from the same mother as tag e
         if (!McPartE->parent()) continue;
         else if (McPartE->parent()->key()!=motherId) continue;
         
         passReconstructionCut(  );

      }


}

void StMcAnalysisMaker::fillPhoEv2(StMuTrack const* const TagE,StMcTrack const * const McTagE)
{
  
  
}

bool StMcAnalysisMaker::passReconstructionCut(StMuTrack const * const pe_1, StMuTrack const * const pe_2)
{
         //the reconstruction cut for partner electron
          StPhysicalHelixD p1Helix = pe_1->helix();
          StPhysicalHelixD p2Helix = pe_2->helix();
          StThreeVectorF const p1Mom = pe_1->momemtum();
          StThreeVectorF const p2Mom = pe_2->momemtum(); //global mom is at the dca to pvtx of the helix
          StThreeVectorF const DCApos_1 = helix.at(helix.pathLength()         //the reconstruction cut for partner electron

          StPhysicalHelixD p1Helix = pe_1->helix();
          StPhysicalHelixD p2Helix = pe_2->helix();
          StThreeVectorF const p1Mom = pe_1->gMom();
          StThreeVectorF const p2Mom = pe_2->gMom(); //global mom is at the dca to pvtx of the helix
          StPhysicalHelixD const p1Line(p1Mom, pe_1->origin(),bField*kilogauss , pe_1->charge()); //B
          StPhysicalHelixD const p2Line(p2Mom, pe_2->origin(),bField*kilogauss , pe_2->charge());

          pair<double, double> const ss = p1Line.pathLengths(p2Line);
          StThreeVectorF const p1AtDca2p2 = p1Line.at(ss.first);
          StThreeVectorF const p2AtDca2p1 = p2Line.at(ss.second);

          // calculate DCA of pion to kaon at their DCA
          float DcaDaughters = (p1AtDca2p2 - p2AtDca2p1).mag();

          // calculate Lorentz vector of e+e- pair
          StThreeVectorF const p1MomAtDca = p1Helix.momentumAt(ss.first, bField * kilogauss);
          StThreeVectorF const p2MomAtDca = p2Helix.momentumAt(ss.second, bField * kilogauss);

          StLorentzVector<float> p2FourMom(p2MomAtDca,p2MomAtDca.massHypothesis(M_ELECTRON));
          StLorentzVector<float> p1FourMom(p1MomAtDca,p1MomAtDca.massHypothesis(M_ELECTRON));
          StLorentzVector<float> mother = p2FourMom+p1FourMom;
          // calculate pointing angle and decay length
          StThreeVectorF const V0 = (p2AtDca2p1 + p1AtDca2p2) * 0.5;
          StThreeVectorF const vtxToV0 = (p2AtDca2p1 + p1AtDca2p2) * 0.5 - pVtx;

          bool passPEtopocut = fabs(DcaDaughters) < anaCuts::EEdcaDaughter;));    //the position of the DCA
          StPhysicalHelixD const p1Line(p1Mom, pe_1->origin(),bField*kilogauss , pe_1->charge()); //B
          StPhysicalHelixD const p2Line(p2Mom, pe_2->origin(),bField*kilogauss , pe_2->charge());

          pair<double, double> const ss = p1Line.pathLengths(p2Line);
          StThreeVectorF const p1AtDca2p2 = p1Line.at(ss.first);
          StThreeVectorF const p2AtDca2p1 = p2Line.at(ss.second);

          // calculate DCA of pion to kaon at their DCA
          float DcaDaughters = (p1AtDca2p2 - p2AtDca2p1).mag();

          // calculate Lorentz vector of e+e- pair
          StThreeVectorF const p1MomAtDca = p1Helix.momentumAt(ss.first, bField * kilogauss);
          StThreeVectorF const p2MomAtDca = p2Helix.momentumAt(ss.second, bField * kilogauss);

          StLorentzVector<float> p2FourMom(p2MomAtDca,p2MomAtDca.massHypothesis(M_ELECTRON));
          StLorentzVector<float> p1FourMom(p1MomAtDca,p1MomAtDca.massHypothesis(M_ELECTRON));
          StLorentzVector<float> mother = p2FourMom+p1FourMom;
          // calculate pointing angle and decay length
          StThreeVectorF const V0 = (p2AtDca2p1 + p1AtDca2p2) * 0.5;
          StThreeVectorF const vtxToV0 = (p2AtDca2p1 + p1AtDca2p2) * 0.5 - pVtx;

          bool passPEtopocut = fabs(DcaDaughters) < anaCuts::EEdcaDaughter;
          bool passMassCut = ; // this is to check if the mass smearing make the mass non-zero

          //fill a mass histogram to compare with the real data peak

}

bool StMcAnalysisMaker::checkTheDecayChannel()
{
  std::map<int , int> motherIdxMap;
  std::vector<std::vector<int>> decayChain;
  int NumPi0=0;
  for (unsigned int iTrk = 0;  iTrk < mMcEvent->tracks().size(); ++iTrk)
  {
      StMcTrack* const mcTrack = mMcEvent->tracks()[iTrk];
      if (!mcTrack)
      {
         LOG_WARN << "Empty mcTrack container" << endm;
         continue;
      }
      int particle = mcTrack->geantId();
      if (particle == 10007) //pi0
      {
        motherIdxMap.insert(std::pair<int,int>( mcTrack->key() ,NumPi0 ));
        NumPi0++;
        std::vector<int> vpi0;
        vpi0.push_back(mcTrack->key());
        decayChain.push_back(vpi0);
      }
      else 
      {
        StMcTrack* mother = mcTrack->geantId()->parent();
        if (!mother) {
          LOG_FATAL<<"Have particles not pi0 or from pi0 decay???" << endm;
          continue;
        }
        if (mother.geantId()==10007)
        {
          //here skip check, as mother mctrack store befor the daughter.
          decayChain[motherIdxMap[mother->key()]].push_back(mcTrack->key()); 
        }
        else 
        {
          StMcTrack* grandmother = mcTrack->parent()->parent();
          if (!grandmother)
          {
             LOG_FATAL<<"Have particles not pi0 or from pi0 decay???" << endm;
             continue;
          }    
          if (grandmother->geantId() == 10007)
          {
             decayChain[motherIdxMap[grandmother->key()]].push_back(mcTrack->key()); 
          }
          else 
          {
            LOG_WARN<< "Have particles neither from pi0->e or pi0->others->e ???" <<endl;
          }
        }
      }
   }

  //print all of the information
  cout<<" print all of the decay channel..." << endl;
  for (int ipi0=0;ipi0<decayChain.size();ipi0++)
  {
    cout <<"print the No. "<< ipi0 << " pi0 decay  ";
    for (int ip=0;ip<decayChain[i].size();ip++)
    {
      cout <<decayChain[ipi0][ip] <<" "; 
    } 
    cout<<endl;
  }
  motherIdxMap.clear();
  for (int i=0;i<decayChain.size();i++)
  {
    decayChain[i].clear();
  }
  decayChain.clear();
}

bool StMcAnalysisMaker::isGoodMcTrack(StMcTrack const* const mcTrack) const
{
     if (mcTrack->geantId() != 2 &&  mcTrack->geantId() != 3) return false; //focus on daughter   
     bool goodStartVtx = false;
     if (mcTrack->parent()->geantId()==10007) goodStartVtx = mcTrack->parent()->startVertex()->position().perp() < McAnaCuts::mcTrackStartVtxR;
     else if goodStartVtx = mcTrack->parent()->parent()->startVertex()->position().perp() < McAnaCuts::mcTrackStartVtxR;
     return  goodStartVtx && mcTrack->pt()>StMcAnaCuts::minPt;
}

bool StMcAnalysisMaker::isGoodTagE(StMuTrack const* const rcTrack) const
{
   float dca = rcTrack->dcaGlobal().mag();
   int nHitsFit = rcTrack->nHitsFit();
   int nHitsMax = rcTrack->nHits();
   bool passnHits = nHitsFit >20 &&  nHitsFit/(1.*nHitsMax)>0.52  ;
   bool hasFirst3Hit = false;
   for (int i=1;i<=3;i++)
   {
     hasFirst3Hit = hasFirst3Hit || rcTrack->topologyMap().hasHitInRow(kTpcId,i); 
   }
   bool goodRcTrack = passnHits && hasFirst3Hit && fabs(dca)<1.5 && rcTrack->pt()>StMcAnaCuts::minPt;
   return goodRcTrack; 
}

bool StMcAnalysisMaker::passTrigger()
{
   LOG_INFO << "Checking triggers..." << endm;
   bool interesting_event = false;

   if (!mEvent)
   {
      LOG_FATAL << "mEvent doesn't exist" << endm;
   }

   if (McAnaCuts::interesting_triggers.size() == 0)
   {
      LOG_WARN << "No triggers in McAnaCuts::interesting_triggers ... accepting event anyway" << endm;
      return true;
   }

   const StTriggerId* st_trgid = mEvent->triggerIdCollection()->nominal();

   for (unsigned int ii = 0; ii < firedTriggersIndices.size(); ++ii)
   {
      firedTriggersIndices[ii] = -1;
   }

   // Fill interesting triggers
   LOG_INFO << "Interesting fired triggers: " << "\n";

   for (unsigned int ii = 0; ii < st_trgid->maxTriggerIds(); ++ii)
   {
      unsigned int id = st_trgid->triggerId(ii);
      int trgIndex = -1;

      for (unsigned int jj = 0; jj < McAnaCuts::interesting_triggers.size(); ++jj)
      {
         if (McAnaCuts::interesting_triggers[jj] == id)
         {
            trgIndex = jj;
            interesting_event = true;
            LOG_INFO << id << " ";
            break;
         }
      }

      if (trgIndex != -1) firedTriggersIndices[trgIndex] = 1.0;
   }

   LOG_INFO << endm;

   return interesting_event;
}

StTrack const* StMcAnalysisMaker::findPartner(StMcTrack* mcTrack, int& maxCommonTpcHits) const
{
   //..StMcTrack find partner from the StTracks
   pair<mcTrackMapIter, mcTrackMapIter> p = mAssoc->mcTrackMap()->equal_range(mcTrack);

   const StTrack* maxTrack = 0;
   maxCommonTpcHits = 0;
   for (mcTrackMapIter k = p.first; k != p.second; ++k)
   {
      int commonTpcHits = k->second->commonTpcHits();
      // const StTrack* track = k->second->partnerTrack()->node()->track(global);//should be global
      const StTrack* track = k->second->partnerTrack()->node()->track(primary);//should be global
      if (track && commonTpcHits > maxCommonTpcHits)
      {
         maxTrack = track;
         maxCommonTpcHits = commonTpcHits;
      }
   }
   return maxTrack;
}

void StMcAnalysisMaker::getDca(StTrack const* const rcTrack, float& dca, float& dcaXY, float& dcaZ) const
{
   StPhysicalHelixD helix = rcTrack->geometry()->helix();
   dca = helix.distance(mEvent->primaryVertex()->position());
   dcaXY = helix.geometricSignedDistance(mEvent->primaryVertex()->position().x(), mEvent->primaryVertex()->position().y());

   StThreeVectorF dcaPoint = helix.at(helix.pathLength(mEvent->primaryVertex()->position()));
   dcaZ = dcaPoint.z() - mEvent->primaryVertex()->position().z();
}


StMcTrack const* StMcAnalysisMaker::findPartner(StGlobalTrack* rcTrack, int& maxCommonTpcHits) const
{
   //.. StGlobalTracks find partner from StMcTracks.
   //.. See example from StRoot/StMcAnalysisMaker
   pair<rcTrackMapIter, rcTrackMapIter> p = mAssoc->rcTrackMap()->equal_range(rcTrack);

   const StMcTrack* maxTrack = 0;
   maxCommonTpcHits = 0;
   for (rcTrackMapIter k = p.first; k != p.second; ++k)
   {
      int commonTpcHits = k->second->commonTpcHits();

      const StMcTrack* track = k->second->partnerMcTrack();

      if (track && commonTpcHits > maxCommonTpcHits)
      {
         maxTrack = track;
         maxCommonTpcHits = commonTpcHits;
      }
   }
   return maxTrack;
}

int StMcAnalysisMaker::Finish()
{
   mFile->cd();
   mFile->Write();
   mFile->Close();
   return kStOk;
}

