#include "rootlogon.h"
#include <string>
#include "Common.h"
TPDF* pdf;
TH1F* hesamp[150];
TH1F* hpsamp[150];
TH1F* hpisamp[150];
TH1F* hKsamp[150];
TH1F* htofsamp[150];
int ipar=0;
void addpdf(TPDF* pdf)
{
  pdf->On();
  pdf->NewPage();
  gPad->Update();
  pdf->Off(); 
}
void drawtitle(TPDF* pdf,TCanvas* c,string s){
  c->cd();
  c->Draw();
  // setPad(0.1,0.1,0.05,0.12);
  TLatex t;
  t.SetTextSize(0.05);
  t.DrawText(0.2,0.5,s.c_str());
  TLatex la;
  la.SetTextSize(0.035);
  la.DrawText(0.1,0.3,(new TDatime())->AsSQLString());
  la.DrawText(0.1,0.2,"by Yuanjing");
  pdf->On();
  pdf->NewPage();
  gPad->Update();
  pdf->Off();
  c->Clear();
}
void projectionAndFit(TH3F* h, float lowpt, float highpt, float &mean,float &sigma,
    float range1,float range2,float meanL,float meanH,float sigmaL,float sigmaH, string p,int centL,int centH)
{
  int lbin = h->GetXaxis()->FindBin(lowpt);
  int hbin = h->GetXaxis()->FindBin(highpt);
  int centbinL= h->GetZaxis()->FindBin(centL);
  int centbinH= h->GetZaxis()->FindBin(centH);
  TH1F* hx = (TH1F*)h->ProjectionY("hx",lbin,hbin,centbinL,centbinH);
  // hx->Rebin();

  if (lowpt>2) hx->Rebin(2);
  if (p=="#pi") hx->Rebin();
  // if ((p=="#pi"&&lowpt>2)) hx->Rebin();
  //hx->SetDirectory(0);
  gPad->SetLogy(1);
  hx->DrawCopy();
  TF1* fit  = new TF1("fit","gaus", range1,range2);
  hx->Fit(fit,"RN");
  fit->SetLineColor(kRed);
  mean = fit->GetParameter(1); 
  if (mean>meanH || mean <meanL) {
    fit->SetParLimits(2, meanL, meanH);
    hx->Fit(fit,"BRN");
  }
  sigma = fit->GetParameter(2); 
  if (sigma>sigmaH|| sigma<sigmaL) {
    fit->SetParLimits(2, sigmaL, sigmaH);
    hx->Fit(fit,"BRN");
  }
  fit->DrawCopy("same"); 
  mean = fit->GetParameter(1); 
  sigma = fit->GetParameter(2); 
  TLatex lat;
  lat.SetTextSize(0.035);
  lat.DrawLatexNDC(0.2,0.85,Form("%.2f<p_{T}<%.2f GeV %s",lowpt,highpt,p.c_str()));
  if (p.find("pi")!=std::string::npos) {
    float total = hx->Integral("width");
    hx->Scale(1./total); 
    hpisamp[ipar] = (TH1F*)hx->Clone(Form("h%s_%.1f_%.1f",p.c_str() ,lowpt,highpt));
    hpisamp[ipar]->SetDirectory(0);
    cout<< Form("h%s_%.3f_%.3f",p.c_str() ,lowpt,highpt)<<endl;
    ipar++;
  }
  // addpdf(pdf);
}
void projAndFitForMg(TH3F* h, float lowpt, float highpt, float &mean,float &sigma,
    float range1,float range2,float meanL,float meanH,float sigmaL,float sigmaH, string p,int centL,int centH)
{
  int lbin = h->GetXaxis()->FindBin(lowpt);
  int hbin = h->GetXaxis()->FindBin(highpt);
  int centbinL= h->GetZaxis()->FindBin(centL);
  int centbinH= h->GetZaxis()->FindBin(centH);

  TH1F* hx = (TH1F*)h->ProjectionY("hx",lbin,hbin,centbinL,centbinH);
  if (lowpt>2.2) hx->Rebin();
  //hx->SetDirectory(0);
  gPad->SetLogy(1);
  hx->DrawCopy();
  hx->GetXaxis()->SetRangeUser(2,6);
  int meanbin =  hx->GetMaximumBin();
  TF1* fit  = new TF1("fit","gaus",-5 ,15);
  fit->SetParLimits(2, sigmaL, sigmaH);
  fit->SetParLimits(1, meanL, meanH);
  hx->GetXaxis()->SetRangeUser(hx->GetBinCenter(meanbin)-1.5,hx->GetBinCenter(meanbin)+1.5);
  TF1* fitall  = new TF1("fitall","gaus(0)+gaus(3)+gaus(6)",-5, 15);
  hx->Fit(fit,"BR");
  fit->SetLineColor(kRed);
  hx->GetXaxis()->SetRangeUser(-10,35);
  fit->DrawCopy("same"); 
  mean = fit->GetParameter(1);
  sigma = fit->GetParameter(2); 
  TLatex lat;
  lat.SetTextSize(0.035);
  lat.DrawLatexNDC(0.2,0.85,Form("%.2f<p_{T}<%.2f GeV %s",lowpt,highpt,p.c_str()));
  // addpdf(pdf);
}
void funtofsamp(double* x,double *p )
{
  int idx = p[7]; //p[8] is no use now
  double e_part = p[0]*TMath::Gaus(x[0],p[1],p[2],1);
  double p_part = p[3]*TMath::Gaus(x[0],p[4],p[5],1);
  double pi_part=0;
  if (x[0]<10&&x[0]>-10)  pi_part= p[6]*hpisamp[idx]->GetBinContent(hpisamp[idx]->FindBin(x[0]));
  double K_part = p[9]*TMath::Gaus(x[0],p[10],p[11],1);
  double Mg_part = p[12]*TMath::Gaus(x[0],p[13],p[14],1);
  return e_part+pi_part+K_part+p_part+Mg_part;
}
void funpisamp(double* x,double *p )
{
  int idx = p[1]; //p[8] is no use now
  double pi_part=0;
  if (x[0]<10&&x[0]>-10)  pi_part = p[0]*hpisamp[idx]->GetBinContent(hpisamp[idx]->FindBin(x[0]));
  return pi_part;
}
void fitNsigE_sys(int centL=6, int centH=8){
  // centH++;  //hist bin number
  // centL++;  //
  myStyle();
  // TCanvas* c = new TCanvas("c","c");
  TCanvas* c = new TCanvas("c","c",900,600);
  pdf = new TPDF(Form("NsigE_%d_%d_sys.pdf",centL,centH));
  pdf->Off();
  drawtitle(pdf,c,"Photonic electron plots");
  TFile* f = TFile::Open("PE.root");
  TH3F* hels = (TH3F*)f->Get("hnSigE_e_ls"); 
  TH3F* he = (TH3F*)f->Get("hnSigE_e"); 
  he->Add(hels,-1);
  he->SetDirectory(0);
  TH3F* hp = (TH3F*)f->Get("hnSigE_p");
  hp->SetDirectory(0);
  TH3F* hk = (TH3F*)f->Get("hnSigE_k");
  hk->SetDirectory(0);
  TH3F* htof = (TH3F*)f->Get("hnSigE_tof");
  htof->SetDirectory(0);
  TH3F* hpimg = (TH3F*)f->Get("hnSigE_piMg");
  hpimg->SetDirectory(0);
  // TH2F* hcut = (TH2F*)f->Get("hnSigE_Cut");
  // hcut->SetDirectory(0);
  // TH1F* hecut = (TH1F*)hcut->ProjectionX();
  // hecut->SetDirectory(0);
  f->Close();
  f = TFile::Open("Ks.root");
  // TH3F* hpi = (TH3F*)f->Get("hnSigE_pi_tof");
  TH3F* hpi = (TH3F*)f->Get("hnSigE_pi");
  // hpi->RebinY(4);
  TH3F* hpils = (TH3F*)f->Get("hnSigE_pi_ls");

  // hpils->RebinY(3);
  hpi->Add(hpils,-1);
  hpi->SetDirectory(0);
  f->Close();
  // return;
  float pt[200]; //0.2-5
  int i=0;
  pt[0]=0.2;
  // while (pt[i]<1){
  //   pt[i+1]=pt[i]+0.02;
  //   i++;
  // }
  // cout<<pt[i]<<" "<<i<<endl;
  while  (pt[i]<2){
    pt[i+1]=pt[i]+0.025;
    i++;
  }
  cout<<pt[i]<<" "<<i<<endl;
  //
  while  (pt[i]<3.2){
    pt[i+1]=pt[i]+0.025;
    i++;
  }
  cout<<pt[i]<<" "<<i<<endl;
  // while (pt[i]<4){
  //   pt[i+1]=pt[i]+0.2;
  //   i++;
  // }
  // cout<<pt[i]<<" "<<i<<endl;
  // while (pt[i]<5){
  //   pt[i+1]=pt[i]+1;
  //   i++;
  // }
  // cout<<pt[i]<<" "<<i<<endl;

  int  bin =i;
  TH1F* hpurity = new TH1F("hpurity", "hpurity;electron p_{T}(GeV);purity",bin,pt);
  TH1F* hpideff = new TH1F("hpideff", "hpideff;electron p_{T}(GeV);eff",bin,pt);

  c->Divide(3,2);
  int color[5]={kRed,kMagenta+1,kGreen+2,kBlue,kOrange+1};
  int line[5]={2,3,4,5,6};
  string pfitname[5]={"e","p","pi","k","pimg"};
  string plegname[5]={"e","p","#pi","K","merged #pi"};
  TH1F* hyield[5];
  TH1F* hmean[5];
  TH1F* hsigma[5];
  for (int ip=0;ip<5;ip++){
    hyield[ip] = new TH1F(Form("hyield_%s",pfitname[ip].c_str()),Form("fitting const. %s;%s p_{T};Const.",plegname[ip].c_str(),plegname[ip].c_str()),bin,pt);
    hsigma[ip] = new TH1F(Form("hsigma_%s",pfitname[ip].c_str()),Form("sigma of nSigE for %s;%s p_{T};n#sigma e",plegname[ip].c_str(),plegname[ip].c_str()),bin,pt);
    hmean[ip] = new TH1F(Form("hmean_%s",pfitname[ip].c_str()),Form("mean of nSigE for  %s;%s p_{T};mean",plegname[ip].c_str(),plegname[ip].c_str()),bin,pt);
  }
  TF1* ftot = new TF1("ftot","gausn(0)+gausn(3)+gausn(6)+gausn(9)+gausn(12)",-10,15);
  // TF1* ftot = new TF1("ftot",funtofsamp,-10,15,15);
  TF1* fpion = new TF1("fpion",funpisamp,-10,10,2);
  TF1* fpartical[5]; 
  for (int ip=0;ip<5;ip++){
    fpartical[ip] = new TF1(Form("f%s",pfitname[ip].c_str()),"gausn(0)",-10,15);
    fpartical[ip]->SetLineColor(color[ip]);
    fpartical[ip]->SetLineStyle(line[ip]);
  }
  TF1* fpimg = new TF1("fpimg","gausn(0)",-10,15);
  TLatex lax;
  TH1F* hpad = new TH1F("hpad","hpad",120,-10,15);
  TF1* frg_p = new TF1("frg_p","[0]+[1]/x/x+[2]/x+[3]*x",-10,35); 
  double frg_p_par[]={-17.8,-1.335,16.87,2.195};
  frg_p->SetParameters(frg_p_par);
  double frg_p_rg[2]={6,-7};
  TF1* frg_k = new TF1("frg_k","[0]+[1]/x/x+[2]/x+[3]*x",-10,35); 
  double frg_k_par[]={-12.5,0.289,5.469,1.946};
  frg_k->SetParameters(frg_k_par);
  double frg_k_rg[2]={6.5,-7.5};

  for (int j=0;j<bin;j++){
    cout<<pt[j]<<" "<<pt[j+1]<<endl;
    float mean[5]={0}, sigma[5]={0};
    c->cd(1);
    projectionAndFit(he,pt[j],pt[j+1],mean[0],sigma[0],-2,2,-0.6,0.1,0.9,1.1,"e",centL,centH);
    c->cd(2);
    projectionAndFit(hp,pt[j],pt[j+1],mean[1],sigma[1],frg_p->Eval(pt[j+1])-7,frg_p->Eval(pt[j])+6.5, -6, 30,0.5,2.5 ,"p",centL,centH);
    c->cd(3);
    projectionAndFit(hpi,pt[j],pt[j+1],mean[2],sigma[2],-10,10, -6, 0, 0.2, 1.2,"#pi",centL,centH);
    c->cd(4);
    projectionAndFit(hk, pt[j],pt[j+1],mean[3],sigma[3],frg_k->Eval(pt[j+1])-6.5,frg_k->Eval(pt[j])+7.5,-6,15,0.5,3,"K",centL,centH);
    c->cd(5);
    double meanpimg =  3;
    if (pt[j]>2) meanpimg = 4.8;
    projAndFitForMg(hpimg,pt[j],pt[j+1],mean[4],sigma[4],0,10,meanpimg,5.2,1.1,1.4,"merged #pi",centL,centH);
    c->cd(6);
    double par[15];
    int lbin = htof->GetXaxis()->FindBin(pt[j]);
    int hbin = htof->GetXaxis()->FindBin(pt[j+1]);
    int centbinL= htof->GetZaxis()->FindBin(centL);
    int centbinH= htof->GetZaxis()->FindBin(centH);

    TH1F* htotsamp = (TH1F*)htof->ProjectionY("htotx",lbin,hbin,centbinL,centbinH); 
    // htotsamp->Rebin(5);
    double constL[5]={ 100,1e3,1e2,1e1,1e1};
    // double constL[5]={ 100,1e4,1e4,1e2,1e2};
    double constH[5]={ 5e7,5e9,1e9,5e8,1e6};
    // double constH[5]={ 5e6,1e9,1e8,5e7,1e5};
    //
    if (centH==8 && centL==6)
    {
      //e
      // if (pt[j]<0.58&&pt[j]>0.52) {
      //   constL[0]=exp(-5.47*pt[j]+16.9);
      //   constH[0]=exp(-5.47*pt[j]+17.1);
      // }
      // if (pt[j]<=0.95&&pt[j]>0.7){
      //   constL[0]=exp(-3.45*pt[j]+16.4);
      //   constH[0]=exp(-3.45*pt[j]+16.6);
      // }
      if (pt[j]<1.5&&pt[j]>0.9){
        constL[0]=0.01*exp(0.35*pt[j]*pt[j]-4.16*pt[j]+16);
        constH[0]=100*exp(0.35*pt[j]*pt[j]-4.16*pt[j]+16);
      }
      // if (pt[j]>2.3){
      //   constL[0]=exp(-2.45*pt[j]+15);
      //   constH[0]=exp(-2.45*pt[j]+16);
      // }
      // //p
      // if (pt[j]>1.7){
      //   constL[1]=exp(-2.8*pt[j]+19);
      //   constH[1]=exp(-2.8*pt[j]+20);
      // }

      //pi
      // if (pt[j]>0.8){
      //   constL[2]=0.8*exp(-2.75*pt[j]+20);
      //   constH[2]=1.2*exp(-2.75*pt[j]+20);
      // }
      //pi
      // if (pt[j]>1.7&&pt[j]<1.9){
      // if (pt[j]>1&&pt[j]<1.15 || pt[j]<1.8 && pt[j]>1.6){
      //   constL[2]=exp(-2.82*pt[j]+20.5);
      //   constH[2]=exp(-2.82*pt[j]+20.7);
      // }
      // if (pt[j]>1&&pt[j]<1.15 || pt[j]<1.8 && pt[j]>1.65){
      //   constL[2]=exp(-2.76*pt[j]+21);
      //   // constH[2]=exp(-2.67*pt[j]+21.44);
      //   constH[2]=exp(-2.76*pt[j]+22);
      // }
      // if (pt[j]>2.2 && pt[j]<2.4){
      //   constL[2]=exp(-2.45*pt[j]+20.9);
      //   constH[2]=exp(-2.45*pt[j]+21.1);
      // }
      // if (pt[j]>0.54&&pt[j]<0.56){
      //   constL[2]=8e7;
      //   constH[2]=9e7;
      // }
      // // //K
      // if (pt[j]<0.6 && pt[j]>0.44){
      //   constL[3]=0.8*exp(10.4*pt[j]+7.48);
      //   constH[3]=1.1*exp(10.4*pt[j]+7.48);
      // }
      // if (pt[j]>0.4&&pt[j]<0.6){
      //   constL[3]=0.95*exp(10.4*pt[j]+6);
      //   constH[3]=1.1*exp(10.4*pt[j]+6);
      // }
      // if (pt[j]>0.8){
      //   constL[3]=exp(-2.8*pt[j]+19);
      //   constH[3]=exp(-2.8*pt[j]+20);
      // }
      // //merged pi
      // if (pt[j]<0.45&&pt[j]>0.35)  {
      //   constL[4]=exp(6.35+pt[j]*9.54);
      //   constH[4]=exp(6.42+pt[j]*9.54);
      // }
    }
    if (centH==5 && centL==2)
    {
      //e
      //
      if (pt[j]<0.58&&pt[j]>0.52) {
        constL[0]=exp(-5.47*pt[j]+16.9);
        constH[0]=exp(-5.47*pt[j]+17.1);

      }
      // if (pt[j]<=0.95&&pt[j]>0.7){
      //   constL[0]=exp(-3.45*pt[j]+16.4);
      //   constH[0]=exp(-3.45*pt[j]+16.6);
      // }
      if (pt[j]<1.5&&pt[j]>0.9){
        constL[0]=0.01*exp(0.35*pt[j]*pt[j]-4.16*pt[j]+16);
        constH[0]=100*exp(0.35*pt[j]*pt[j]-4.16*pt[j]+16);
      }
      // if (pt[j]>2.3){
      //   constL[0]=exp(-2.45*pt[j]+15);
      //   constH[0]=exp(-2.45*pt[j]+16);
      // }
      // //p
      // if (pt[j]>1.7){
      //   constL[1]=exp(-2.8*pt[j]+19);
      //   constH[1]=exp(-2.8*pt[j]+20);
      // }

      //pi
      // if (pt[j]>0.8){
      //   constL[2]=0.8*exp(-2.75*pt[j]+20);
      //   constH[2]=1.2*exp(-2.75*pt[j]+20);
      // }
      //pi
      // if (pt[j]>1.7&&pt[j]<1.9){
      if (pt[j]>1&&pt[j]<1.15 || pt[j]<1.8 && pt[j]>1.6){
        constL[2]=exp(-2.82*pt[j]+20.5);
        constH[2]=exp(-2.82*pt[j]+20.7);
      }
      // if (pt[j]>1&&pt[j]<1.15 || pt[j]<1.8 && pt[j]>1.65){
      //   constL[2]=exp(-2.76*pt[j]+21);
      //   // constH[2]=exp(-2.67*pt[j]+21.44);
      //   constH[2]=exp(-2.76*pt[j]+22);
      // }
      // if (pt[j]>2.2 && pt[j]<2.4){
      //   constL[2]=exp(-2.45*pt[j]+20.9);
      //   constH[2]=exp(-2.45*pt[j]+21.1);
      // }
      if (pt[j]>0.54&&pt[j]<0.56){
        constL[2]=8e7;
        constH[2]=9e7;
      }
      // // //K
      // if (pt[j]<0.6 && pt[j]>0.44){
      //   constL[3]=0.8*exp(10.4*pt[j]+7.48);
      //   constH[3]=1.1*exp(10.4*pt[j]+7.48);
      // }
      // if (pt[j]>0.4&&pt[j]<0.6){
      //   constL[3]=0.95*exp(10.4*pt[j]+6);
      //   constH[3]=1.1*exp(10.4*pt[j]+6);
      // }
      // if (pt[j]>0.8){
      //   constL[3]=exp(-2.8*pt[j]+19);
      //   constH[3]=exp(-2.8*pt[j]+20);
      // }
      // //merged pi
      // if (pt[j]<0.45&&pt[j]>0.35)  {
      //   constL[4]=exp(6.35+pt[j]*9.54);
      //   constH[4]=exp(6.42+pt[j]*9.54);
      // }
    }
    if (centH==8 && centL==0)
    {
      //e
      //
      if (pt[j]<0.58&&pt[j]>0.48) {
        constL[0]=exp(-5.12*pt[j]+17.6);
        constH[0]=exp(-5.12*pt[j]+17.9);

      }
      if (pt[j]<=0.95&&pt[j]>0.7){
        constL[0]=exp(-3.45*pt[j]+16.4);
        constH[0]=exp(-3.45*pt[j]+16.6);
      }
      if (pt[j]<1.4&&pt[j]>0.95){
        constL[0]=exp(-3.45*pt[j]+16.6);
        constH[0]=exp(-3.45*pt[j]+16.65);
      }
      // if (pt[j]>2.3){
      //   constL[0]=exp(-2.45*pt[j]+15);
      //   constH[0]=exp(-2.45*pt[j]+16);
      // }
      // //p
      // if (pt[j]>1.7){
      //   constL[1]=0.3*exp(-1.72*pt[j]+16.1);
      //   constH[1]=1.8*exp(-1.72*pt[j]+16.1);
      // }

      //pi
      // if (pt[j]>0.8){
      //   constL[2]=0.8*exp(-2.75*pt[j]+20);
      //   constH[2]=1.2*exp(-2.75*pt[j]+20);
      // }
      //pi
      if (pt[j]>1.6&&pt[j]<1.9){
        constL[2]=exp(-2.67*pt[j]+21.3);
        constH[2]=exp(-2.67*pt[j]+21.44);
      }
      if (pt[j]>1&&pt[j]<1.15){
        constL[2]=exp(-2.755*pt[j]+21.44);
        // constH[2]=exp(-2.67*pt[j]+21.44);
        constH[2]=exp(-2.755*pt[j]+21.48);
      }
      // if (pt[j]>2.2 && pt[j]<2.4){
      //   constL[2]=exp(-2.45*pt[j]+20.9);
      //   constH[2]=exp(-2.45*pt[j]+21.1);
      // }
      // if (pt[j]>0.5&&pt[j]<0.6){
      //   constL[2]=3.5e7;
      //   constH[2]=5e7;
      // }
      // // //K
      if (pt[j]<0.6 && pt[j]>0.44){
        constL[3]=0.8*exp(10.4*pt[j]+7.48);
        constH[3]=1.1*exp(10.4*pt[j]+7.48);
      }
      // if (pt[j]>0.4&&pt[j]<0.6){
      //   constL[3]=0.95*exp(10.4*pt[j]+6);
      //   constH[3]=1.1*exp(10.4*pt[j]+6);
      // }
      // if (pt[j]>0.8){
      //   constL[3]=0.005*exp(-1.74*pt[j]+16.1);
      //   constH[3]=exp(-1.74*pt[j]+16.1);
      // }
      // //merged pi
      if (pt[j]<0.45&&pt[j]>0.35)  {
        constL[4]=exp(6.35+pt[j]*9.54);
        constH[4]=exp(6.42+pt[j]*9.54);
      }
    }
    for (int i=0;i<5;i++){
      // if (i!=2) ftot->FixParameter(i*3+1, mean[i]);
      ftot->FixParameter(i*3+1, mean[i]);
      ftot->FixParameter(i*3+2, sigma[i]);
      fpartical[i]->FixParameter(1,mean[i]);
      fpartical[i]->FixParameter(2,sigma[i]);
      // ftot->SetParLimits(i*3, 0,htotsamp->Integral()/htotsamp->GetBinWidth(1));
      ftot->SetParLimits(i*3, constL[i], constH[i]);
      // ftot->SetParameter(i*3, 0.5*(constL[i]+ constH[i]));
      hmean[i]->SetBinContent(j+1, mean[i]);
      hsigma[i]->SetBinContent(j+2, sigma[i]);
    }
    // ftot->FixParameter(7,j); //for pion
    //e
    htotsamp->GetXaxis()->SetRangeUser(-2,2); 
    htotsamp->Fit(fpartical[0],"RN");
    double e_const  = fpartical[0]->GetParameter(0);
    ftot->SetParameter(0,e_const);
    htotsamp->GetXaxis()->SetRangeUser(-10,20); 
    //p 
    // htotsamp->GetXaxis()->SetRangeUser( frg_p->Eval(pt[j+1])-7,frg_p->Eval(pt[j])+6.5); 
    // htotsamp->Fit(fpartical[1],"R");
    // double pi_const  = fpartical[1]->GetParameter(0);
    // ftot->SetParameter(3,pi_const);
    // htotsamp->GetXaxis()->SetRangeUser(-10,20); 
    //pi
    htotsamp->GetXaxis()->SetRangeUser(-10,-2); 
    htotsamp->Fit(fpartical[2],"RN");
    double pi_const  = fpartical[2]->GetParameter(0);
    ftot->SetParameter(6,pi_const);
    htotsamp->GetXaxis()->SetRangeUser(-10,20); 
    // //K
    // htotsamp->GetXaxis()->SetRangeUser( frg_k->Eval(pt[j+1])-6.5,frg_k->Eval(pt[j])+7.5); 
    // htotsamp->Fit(fpartical[3],"R");
    // double k_const  = fpartical[3]->GetParameter(0);
    // ftot->SetParameter(9,k_const);
    // htotsamp->GetXaxis()->SetRangeUser(-10,20); 
    // //merged  pi
    // htotsamp->GetXaxis()->SetRangeUser(3,6); 
    // htotsamp->Fit(fpartical[4],"R");
    // double pimg_const = fpartical[4]->GetParameter(0);
    // ftot->SetParameter(12,pimg_const);
    // htotsamp->GetXaxis()->SetRangeUser(-10,20); 
    for (int ip=0;ip<5;ip++){
      ftot->SetParLimits(i*3, constL[ip], constH[ip]); 
      // ftot->SetParameter(i*3, 0.5*(constL[ip]+constH[ip])); 
    }
    gPad->SetLogy();
    htotsamp->Draw();
    htotsamp->GetXaxis()->SetRangeUser(-10,5);
    htotsamp->Fit(ftot,"RB");
    htotsamp->GetXaxis()->SetRangeUser(-10,15);
    htotsamp->Fit(ftot,"RB");
    ftot->GetParameters(par);

    TLegend* leg = new TLegend(0.7,0.7,0.88,0.88);
    for (int ip=0;ip<5;ip++){
      fpartical[ip]->SetParameters(par+ip*3);  
      // if (ip!=2) fpartical[ip]->Draw("same");
      fpartical[ip]->Draw("same");
      // if (ip!=2) leg->AddEntry(fpartical[ip],plegname[ip].c_str(),"l");
      leg->AddEntry(fpartical[ip],plegname[ip].c_str(),"l");
      // if (ip==2){
      //   fpion->SetParameter(0,par[6]);
      //   fpion->SetParameter(1,par[7]);
      //   fpion->SetLineColor(kGreen);
      //   fpion->SetLineStyle(9);
      //   fpion->Draw("same");
      //   leg->AddEntry(fpion,plegname[ip].c_str(),"l");
      // }
      hyield[ip]->SetBinContent(j+1, par[ip*3] );
      hyield[ip]->SetBinError(j+1, ftot->GetParError(ip*3) );
    }

    leg->Draw();
    c->cd();
    addpdf(pdf);
    double meanpt = 0.5*(pt[j]+pt[j+1]);
    // double lowsigma = (meanpt-0.2)*1.5625-2.34;
    // double lowsigma = meanpt*2-2.8;
    double lowsigma = 0;
    // double lowsigma = -1;
    double lowsigma = meanpt*3.5-2.8;
    if(meanpt>0.8) lowsigma = 0;
    // if(meanpt>1) lowsigma = -1.09;
    // if(meanpt>0.8) lowsigma = -1.2;
    // float total = htotsamp->Integral(htotsamp->FindBin(lowsigma),htotsamp->FindBin(2));
    float total = ftot->Integral(lowsigma,2)/htotsamp->GetBinWidth(1);
    // float total = ftot->Integral(lowsigma,3)/htotsamp->GetBinWidth(1);
    float electron = fpartical[0]->Integral(lowsigma,2)/htotsamp->GetBinWidth(1);
    // float electron = fpartical[0]->Integral(lowsigma,1.66)/htotsamp->GetBinWidth(1);
    float purity = electron*1.0/total;
    // float eff = fpartical[0]->Integral(-3.5,3.5)/fpartical[0]->Integral(-6,6);
    float eff = fpartical[0]->Integral(-3.5,3.5)/fpartical[0]->Integral(-6,6);
    if (pt[j]<=0.3)  eff = fpartical[0]->Integral(-3.8,3.8)/fpartical[0]->Integral(-6,6);
    hpideff->SetBinContent(j+1,eff);
    hpurity->SetBinContent(j+1,purity);
    }
    gPad->SetLogy(0);
    hpurity->GetYaxis()->SetRangeUser(0.2,1.1);
    hpurity->Draw();
    hpurity->SetDirectory(0);
    addpdf(pdf);
    hpideff->Draw();
    hpideff->SetDirectory(0);
    addpdf(pdf);
    TCanvas* cp = new TCanvas("cp","cp");
    cp->Divide(2,2);
    cp->cd();
    TLegend* lp = new TLegend(0.2,0.2,0.8,0.8);
    for (int ip=0;ip<5;ip++){
      cp->cd();
      cp->cd(1);
      gPad->SetLogy();
      hyield[ip]->SetLineColor(color[ip]);
      hyield[ip]->SetMarkerColor(color[ip]);
      hyield[ip]->SetMarkerSize(0.6);
      hyield[ip]->GetYaxis()->SetRangeUser(10,1e9);
      hyield[ip]->Draw("same");
      hyield[ip]->SetDirectory(0);
      // gPad->Update();
      cp->cd(2);
      hsigma[ip]->SetLineColor(color[ip]);
      hsigma[ip]->GetYaxis()->SetRangeUser(0.5,2.5);
      hsigma[ip]->Draw("same");
      hsigma[ip]->SetDirectory(0);
      // gPad->Update();
      cp->cd(3);
      hmean[ip]->SetLineColor(color[ip]);
      hmean[ip]->GetYaxis()->SetRangeUser(-10,15);
      hmean[ip]->Draw("same");
      hmean[ip]->SetDirectory(0);
      lp->AddEntry(hyield[ip],plegname[ip].c_str(),"l");
      // gPad->Update();
    }

    cp->cd(4);
    gPad->Draw();
    lp->Draw();
    cp->cd();
    pdf->On();
    pdf->NewPage();
    cp->Update();
    pdf->Off(); 

    pdf->On();
    pdf->Close();
    TFile* fNsig = new TFile(Form("Nsigma_%d_%d_sys.root",centL,centH),"recreate");
    hpurity->Write();
    hpideff->Write();
    for (int ip=0;ip<5;ip++){
      hyield[ip]->Write();
      hsigma[ip]->Write();
      hmean[ip]->Write();
    }
  }
